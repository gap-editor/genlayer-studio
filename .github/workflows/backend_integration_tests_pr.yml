name: CI

on:
  pull_request:
    types:
      - opened
      - labeled
      - synchronize
  pull_request_review:
    types:
      - submitted
      - edited

concurrency:
  group: backend-e2e-${{ github.event.number || github.event.pull_request.number}}
  cancel-in-progress: true

jobs:
  triggers:
    name: Get Triggers
    runs-on: ubuntu-latest
    outputs:
      is_pull_request_opened: ${{ github.event_name == 'pull_request' && github.event.action == 'opened'}}
      is_pull_request_review_approved: ${{ github.event_name == 'pull_request_review' && github.event.review.state == 'APPROVED'}}
      is_pull_request_labeled_with_run_tests: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-tests')}}
    steps:
      - run: true

  test:
    needs: triggers
    if: ${{ needs.triggers.outputs.is_pull_request_opened == 'true' || needs.triggers.outputs.is_pull_request_review_approved == 'true' || needs.triggers.outputs.is_pull_request_labeled_with_run_tests == 'true' }}

    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy .env file
        run: cp .env.example .env

      # TODO: we should also add also heuristai and anthropic keys to the e2e tests and test all providers

      - name: Set OPENAIKEY, FINALITY_WINDOW and TEST_WITH_MOCK_LLMSin the .env file so they can be loaded from the environment
        env:
          OPENAIKEY: ${{ secrets.OPENAIKEY }}
        run: |
          sed -i "s/<add_your_openai_api_key_here>/${OPENAIKEY}/g" .env
          sed -i "s/FINALITY_WINDOW =.*/FINALITY_WINDOW = 10/" .env
          echo >> .env
          if [[ "${{ needs.triggers.outputs.is_pull_request_review_approved }}" == "true" ]]; then
            echo "TEST_WITH_MOCK_LLMS=false" >> .env
          else
            echo "TEST_WITH_MOCK_LLMS=true" >> .env
          fi
          echo "TEST_INTEGRATION=true" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker images
        run: docker compose build

      - name: Run Docker Compose
        run: docker compose -f docker-compose.yml -f tests/integration/docker/docker-compose.override.yml up -d

      - name: Wait for services to be ready and verify the complete setup
        timeout-minutes: 5
        run: |
          # Function to check service readiness
          check_service() {
            local service=$1
            local max_attempts=30
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
              if docker compose logs $service | grep -q "$2"; then
                echo "$service is ready!"
                return 0
              fi
              echo "Waiting for $service... (Attempt $attempt/$max_attempts)"
              sleep 2
              attempt=$((attempt + 1))
            done

            echo "Error: $service failed to become ready"
            docker compose logs $service
            return 1
          }

          # Check each service
          check_service "jsonrpc" "Debug mode: off" || exit 1
          check_service "webrequest" "Running on http://127.0.0.1:5000" || exit 1
          check_service "mock-server" "Starting mock server on 0.0.0.0:8000" || exit 1
          check_service "nginx-proxy" "Configuration complete; ready for start up" || exit 1

          # Final verification of mock server response
          echo "Verifying mock server response..."
          for i in {1..10}; do
            response=$(curl -s http://localhost/)
            echo "Response received:"
            echo "$response"
            if echo "$response" | grep -q "Georgia 2 - 0 Portugal"; then
              echo "Mock server is returning expected content!"
              exit 0
            fi
            echo "Attempt $i: Waiting for mock server content..."
            sleep 2
          done

          echo "Error: Mock server not returning expected content"
          echo "Mock server logs:"
          docker compose logs mock-server
          echo "Nginx proxy logs:"
          docker compose logs nginx-proxy
          exit 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements.test.txt

      - name: Run tests
        run: |
          pytest tests/integration/contract_examples/test_football_prediction_market.py -svv

      - name: Dump Docker Compose logs
        if: always()
        run: docker compose logs

      - name: Cleanup
        if: always()
        run: |
          docker compose down --remove-orphans
          docker network rm test-network || true

      - name: Show nginx logs on failure
        if: failure()
        run: |
          echo "Nginx error log:"
          sudo cat /var/log/nginx/error.log
          echo "Nginx access log:"
          sudo cat /var/log/nginx/access.log

      - name: Shutdown Docker Compose
        if: always()
        run: docker compose down

  db-integration-test:
    needs: triggers
    if: ${{ needs.triggers.outputs.is_pull_request_opened == 'true' || needs.triggers.outputs.is_pull_request_review_approved == 'true' || needs.triggers.outputs.is_pull_request_labeled_with_run_tests == 'true' }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Run Docker Compose
        run: docker compose -f tests/db-sqlalchemy/docker-compose.yml --project-directory . up tests --build --force-recreate --always-recreate-deps

  load-test:
    name: Load Tests
    needs: triggers
    if: ${{ needs.triggers.outputs.is_pull_request_opened == 'true' || needs.triggers.outputs.is_pull_request_review_approved == 'true' || needs.triggers.outputs.is_pull_request_labeled_with_run_tests == 'true' }}
    uses: ./.github/workflows/load-test-oha.yml
    with:
      oha-version: "v1.4.5"

  hardhat-test:
    needs: triggers
    if: ${{ needs.triggers.outputs.is_pull_request_opened == 'true' || needs.triggers.outputs.is_pull_request_review_approved == 'true' || needs.triggers.outputs.is_pull_request_labeled_with_run_tests == 'true' }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Run Docker Compose
        run: docker compose -f tests/hardhat/docker-compose.yml --project-directory . up tests --build --force-recreate --always-recreate-deps

