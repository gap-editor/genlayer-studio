name: CI

on:
  pull_request:
    types:
      - opened
      - labeled
      - synchronize
  pull_request_review:
    types:
      - submitted
      - edited

concurrency:
  group: backend-e2e-${{ github.event.number || github.event.pull_request.number}}
  cancel-in-progress: true

jobs:
  triggers:
    name: Get Triggers
    runs-on: ubuntu-latest
    outputs:
      is_pull_request_opened: ${{ github.event_name == 'pull_request' && github.event.action == 'opened'}}
      is_pull_request_review_approved: ${{ github.event_name == 'pull_request_review' && github.event.review.state == 'APPROVED'}}
      is_pull_request_labeled_with_run_tests: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-tests')}}
    steps:
      - run: true

  test:
    needs: triggers
    if: ${{ needs.triggers.outputs.is_pull_request_opened == 'true' || needs.triggers.outputs.is_pull_request_review_approved == 'true' || needs.triggers.outputs.is_pull_request_labeled_with_run_tests == 'true' }}

    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy .env file
        run: cp .env.example .env

      # TODO: we should also add also heuristai and anthropic keys to the e2e tests and test all providers

      - name: Set OPENAIKEY, FINALITY_WINDOW and TEST_WITH_MOCK_LLMSin the .env file so they can be loaded from the environment
        env:
          OPENAIKEY: ${{ secrets.OPENAIKEY }}
        run: |
          sed -i "s/<add_your_openai_api_key_here>/${OPENAIKEY}/g" .env
          sed -i "s/FINALITY_WINDOW =.*/FINALITY_WINDOW = 10/" .env
          echo >> .env
          if [[ "${{ needs.triggers.outputs.is_pull_request_review_approved }}" == "true" ]]; then
            echo "TEST_WITH_MOCK_LLMS=false" >> .env
          else
            echo "TEST_WITH_MOCK_LLMS=true" >> .env
          fi
          echo "TEST_INTEGRATION=true" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker images
        run: docker compose build

      - name: Run Docker Compose
        run: docker compose up -d

      - name: Wait for services to be up
        timeout-minutes: 5
        run: |
          timeout=60
          counter=0
          while [[ "$counter" -lt "$timeout" ]]; do
            if curl -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"ping","params":[],"id":1}' http://0.0.0.0:4000/api | grep -q "OK"; then
              echo "RPC server is up!"
              break
            else
              echo "Waiting for RPC server... ($counter/$timeout)"
              sleep 5
              counter=$((counter+1))
            fi
          done
          # Fail if the service didn't start within the timeout
          if [[ "$counter" -ge "$timeout" ]]; then
            echo "Error: Timeout while waiting for RPC server"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements.test.txt

      - name: Setup mock server and reverse proxy
        run: |
          # Start the mock server in the background
          python test_server.py &
          MOCK_PID=$!

          # Wait for mock server to be ready
          echo "Waiting for mock server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8000 > /dev/null; then
              echo "Mock server is up!"
              break
            fi
            sleep 1
          done

          # Setup nginx
          echo "Setting up nginx reverse proxy..."
          sudo apt-get update
          sudo apt-get install -y nginx

          # Configure nginx to listen on all interfaces
          sudo bash -c 'cat > /etc/nginx/sites-available/default << EOF
          server {
              listen 0.0.0.0:80;
              listen [::]:80;
              server_name _;

              access_log /var/log/nginx/access.log;
              error_log /var/log/nginx/error.log debug;

              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_read_timeout 300;
                  proxy_connect_timeout 300;
              }
          }
          EOF'

          # Ensure nginx can bind to port 80
          sudo sysctl -w net.ipv4.ip_unprivileged_port_start=80

          # Restart nginx
          sudo systemctl restart nginx

          # Add Docker network routes
          echo "Setting up Docker network access..."
          sudo ip route add 172.16.0.0/12 dev docker0 || true
          sudo ip route add 192.168.0.0/16 dev docker0 || true

          # Test from host
          echo "Testing from host..."
          curl -v http://localhost/

          # Test from Docker network
          echo "Testing from Docker network..."
          docker run --rm curlimages/curl:8.5.0 curl -v http://host.docker.internal/

          # Keep the mock server running for the tests
          disown $MOCK_PID

      - name: Run tests
        run: |
          pytest tests/integration/contract_examples/test_football_prediction_market.py -svv

      - name: Cleanup
        if: always()
        run: |
          # Kill the mock server if it's still running
          pkill -f "python test_server.py" || true

      - name: Show nginx logs on failure
        if: failure()
        run: |
          echo "Nginx error log:"
          sudo cat /var/log/nginx/error.log
          echo "Nginx access log:"
          sudo cat /var/log/nginx/access.log

      - name: Dump Docker Compose logs
        run: docker compose logs
        if: failure()

      - name: Shutdown Docker Compose
        if: always()
        run: docker compose down

  db-integration-test:
    needs: triggers
    if: ${{ needs.triggers.outputs.is_pull_request_opened == 'true' || needs.triggers.outputs.is_pull_request_review_approved == 'true' || needs.triggers.outputs.is_pull_request_labeled_with_run_tests == 'true' }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Run Docker Compose
        run: docker compose -f tests/db-sqlalchemy/docker-compose.yml --project-directory . up tests --build --force-recreate --always-recreate-deps

  load-test:
    name: Load Tests
    needs: triggers
    if: ${{ needs.triggers.outputs.is_pull_request_opened == 'true' || needs.triggers.outputs.is_pull_request_review_approved == 'true' || needs.triggers.outputs.is_pull_request_labeled_with_run_tests == 'true' }}
    uses: ./.github/workflows/load-test-oha.yml
    with:
      oha-version: "v1.4.5"

  hardhat-test:
    needs: triggers
    if: ${{ needs.triggers.outputs.is_pull_request_opened == 'true' || needs.triggers.outputs.is_pull_request_review_approved == 'true' || needs.triggers.outputs.is_pull_request_labeled_with_run_tests == 'true' }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Run Docker Compose
        run: docker compose -f tests/hardhat/docker-compose.yml --project-directory . up tests --build --force-recreate --always-recreate-deps

