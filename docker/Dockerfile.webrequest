FROM --platform=linux/amd64 python:3.13.0-slim

ENV base=/app
ENV path=webrequest
ENV selpath=selenium

# These are all the requirements to run chrome and it's webdriver + selenium
# see https://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/debian/dist_package_versions.json
RUN mkdir -p "${base}/${path}" && \
    mkdir -p "${base}/${selpath}" && \
    apt-get update && \
    apt-get install -y --no-install-recommends wget gnupg ca-certificates unzip curl \
    openjdk-17-jre-headless fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release xdg-utils && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    useradd -m appuser && \
    mkdir -p /selenium && \
    cd "${base}/${selpath}" && \
    wget -q https://storage.googleapis.com/chrome-for-testing-public/128.0.6613.119/linux64/chrome-linux64.zip && \
    wget -q https://storage.googleapis.com/chrome-for-testing-public/128.0.6613.119/linux64/chromedriver-linux64.zip && \
    unzip chromedriver-linux64.zip && \
    unzip chrome-linux64.zip && \
    rm chromedriver-linux64.zip chrome-linux64.zip && \
    wget -q https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.24.0/selenium-server-4.24.0.jar && \
    true

ENV PYTHONPATH="${base}/${path}"
ENV PATH="${PATH}:${base}:${base}/${selpath}/chromedriver-linux64/:${base}/${selpath}/chrome-linux64/"
RUN chown -R appuser:appuser $base

USER appuser
WORKDIR $base

# Add debug logging wrapper
RUN mkdir -p $base/$path && echo 'import logging\n\
logging.basicConfig(\n\
    level=logging.DEBUG,\n\
    format="[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s",\n\
    force=True\n\
)\n\
logger = logging.getLogger("webrequest")\n\
\n\
def debug_selenium():\n\
    selenium_logger = logging.getLogger("selenium")\n\
    selenium_logger.setLevel(logging.DEBUG)\n\
    webdriver_logger = logging.getLogger("selenium.webdriver")\n\
    webdriver_logger.setLevel(logging.DEBUG)\n\
\n\
debug_selenium()\n' > $base/$path/debug_logging.py

COPY --chown=appuser:appuser $path $base/$path
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip -r $path/requirements.txt && \
    # Add import of debug logging to server.py
    sed -i '1i import debug_logging  # Enable debug logging\' $base/$path/server.py && \
    # Add debug logging to JSONRPC methods
    sed -i '/def llm_plugin_call/i \    logger.debug("Starting llm_plugin_call with plugin_id: %s", plugin_id)\n' $base/$path/server.py && \
    sed -i '/def llm_genvm_module_call/i \    logger.debug("Starting llm_genvm_module_call with model: %s", encoded_model)\n' $base/$path/server.py && \
    sed -i '/def status/i \    logger.debug("Status check called with: %s", x)\n' $base/$path/server.py && \
    # Add logging to return functions
    sed -i '/def return_success/i \    logger.debug("Returning success: %s", data)\n' $base/$path/server.py && \
    sed -i '/def return_error/i \    logger.debug("Returning error: %s", message)\n' $base/$path/server.py

# TODO: download and cache webdriver here

HEALTHCHECK --interval=5s --timeout=5s --retries=10 --start-period=3s CMD python "${base}/webrequest/healthcheck.py"

COPY --chown=appuser:appuser webrequest/docker-entry.sh "${base}/webrequest-docker-entry.sh"
RUN chmod +x "${base}/webrequest-docker-entry.sh"
WORKDIR $base/$path
CMD "${base}/webrequest-docker-entry.sh"
