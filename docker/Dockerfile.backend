FROM python:3.12.6-slim AS base

ARG TARGETPLATFORM

ARG path=/app
WORKDIR $path

ADD backend/protocol_rpc/requirements.txt backend/protocol_rpc/requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu \
    && pip install --cache-dir=/root/.cache/pip -r backend/protocol_rpc/requirements.txt

RUN groupadd -r backend-group \
    && useradd -r -g backend-group backend-user \
    && mkdir -p /home/backend-user/.cache/huggingface \
    && chown -R backend-user:backend-group /home/backend-user \
    && chown -R backend-user:backend-group $path \
    && mkdir -p /genvm

ENV PYTHONPATH "${PYTHONPATH}:/${path}"
ENV FLASK_APP backend/protocol_rpc/server.py
ENV HUGGINGFACE_HUB_CACHE /home/backend-user/.cache/huggingface

SHELL ["/bin/bash", "-c"]
RUN apt-get update -y && apt-get install -y --no-install-recommends curl unzip && apt-get clean && rm -rf /var/lib/apt/lists/*
# FIXME(kp2pml30): rewrite when genvm becomes public
RUN cd /genvm \
    && if [[ "$TARGETPLATFORM" == "linux/amd64" ]] ; \
       then URL="https://storage.googleapis.com/gh-af/genvm_executor_7a6de196b4fa57b05505402293b000ca55f1c37e_20241114_083349/genvm_executor.zip" ; \
       elif [[ "$TARGETPLATFORM" == "linux/arm64" ]] ; \
       then URL="https://storage.googleapis.com/gh-af/genvm_executor_7a6de196b4fa57b05505402293b000ca55f1c37e_20241114_083447/genvm_executor.zip" ; \
       else echo "Sorry, $TARGETPLATFORM is not supported yet" ; exit 1 ; \
       fi \
    && curl -L --fail-with-body -H 'Accept: application/octet-stream' -o executor.zip "$URL" \
    && curl -L --fail-with-body -H 'Accept: application/octet-stream' -o runners.zip "https://storage.googleapis.com/gh-af/genvm_runners_7a6de196b4fa57b05505402293b000ca55f1c37e_20241114_084603/runners.zip" \
    && unzip runners.zip && unzip executor.zip && rm runners.zip executor.zip \
    && ls -R . \
    && cd "$path"

COPY ../.env .
COPY backend $path/backend

HEALTHCHECK --interval=1s --timeout=1s --retries=30 --start-period=3s CMD python backend/healthcheck.py --port ${FLASK_SERVER_PORT}

###########START NEW IMAGE : DEBUGGER ###################
FROM base AS debug
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip debugpy watchdog
USER backend-user
CMD watchmedo auto-restart --no-restart-on-command-exit --recursive --pattern="*.py" --ignore-patterns="*.pyc;*__pycache__*" -- python -m debugpy --listen 0.0.0.0:${RPCDEBUGPORT} -m flask run -h 0.0.0.0 -p ${FLASK_SERVER_PORT}

###########START NEW IMAGE: PRODUCTION ###################
FROM base AS prod
USER backend-user
CMD flask run -h 0.0.0.0 -p ${FLASK_SERVER_PORT}
